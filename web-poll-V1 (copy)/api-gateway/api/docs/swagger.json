{
    "swagger": "2.0",
    "info": {
        "contact": {}
    },
    "paths": {
        "/confirm-registration": {
            "post": {
                "description": "Confirms a user's registration using the code sent to their email.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "registration"
                ],
                "summary": "Confirm registration with code",
                "parameters": [
                    {
                        "description": "Confirmation request",
                        "name": "confirmation",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.ConfirmRegistrationReq"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "JWT tokens",
                        "schema": {
                            "$ref": "#/definitions/token.Tokens"
                        }
                    },
                    "400": {
                        "description": "Invalid request payload",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "401": {
                        "description": "Incorrect verification code",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "Verification code expired or email not found",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/forgot-password": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Sends a confirmation code to email recovery password",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "password-recovery"
                ],
                "summary": "Forgot passwrod",
                "parameters": [
                    {
                        "description": "User login credentials",
                        "name": "credentials",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.ForgotPasswordReq"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "Page not found",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Server error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/login": {
            "post": {
                "description": "Authenticate user with email and password",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "login"
                ],
                "summary": "Login a user",
                "parameters": [
                    {
                        "description": "User login credentials",
                        "name": "credentials",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.LoginReq"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "JWT tokens",
                        "schema": {
                            "$ref": "#/definitions/token.Tokens"
                        }
                    },
                    "400": {
                        "description": "Invalid request payload",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "401": {
                        "description": "Invalid email or password",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/poll": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Create a new poll with poll number, title, and options",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "polls"
                ],
                "summary": "Create a new poll",
                "parameters": [
                    {
                        "description": "Poll creation request",
                        "name": "poll",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/genprotos.PollCreateReq"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Successfully created!",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Invalid request payload",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Server error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/poll/{id}": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Get a poll by its ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "polls"
                ],
                "summary": "Get a poll by ID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Poll ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/genprotos.PollGetByIDRes"
                        }
                    },
                    "404": {
                        "description": "Poll not found",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Server error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "put": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Update an existing poll with poll number, title, and options",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "polls"
                ],
                "summary": "Update an existing poll",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Poll ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Poll update request",
                        "name": "poll",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/genprotos.PollUpdateReqSwag"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully updated",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Invalid request payload",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "Poll not found",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Server error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Delete a poll by its ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "polls"
                ],
                "summary": "Delete an existing poll",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Poll ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully deleted!",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Invalid request payload",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "Poll not found",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Server error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/polls": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Get all polls with pagination",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "polls"
                ],
                "summary": "Get all polls",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/genprotos.PollGetAllRes"
                        }
                    },
                    "500": {
                        "description": "Server error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/profile": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Get the profile of the authenticated user",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "user"
                ],
                "summary": "Get user profile",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.GetProfileResp"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "User not found",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Server error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/question": {
            "put": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Update an existing question with the given details",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "question"
                ],
                "summary": "Update an existing question",
                "parameters": [
                    {
                        "description": "Question update request",
                        "name": "question",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/genprotos.QuestionUpdateReq"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Question updated successfully",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Invalid request payload",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Server error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Create a new question with the given details",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "question"
                ],
                "summary": "Create a new question",
                "parameters": [
                    {
                        "description": "Question creation request",
                        "name": "question",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/genprotos.QuestionCreateReq"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Question created successfully",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Invalid request payload",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Server error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/question/{id}": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Get a question by its ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "question"
                ],
                "summary": "Get a question by ID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Question ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/genprotos.QuestionGetByIDRes"
                        }
                    },
                    "500": {
                        "description": "Server error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Delete a question by its ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "question"
                ],
                "summary": "Delete a question",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Question ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Question deleted successfully",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Server error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/questions/{poll_id}": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Get all questions with pagination",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "question"
                ],
                "summary": "Get all questions",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Poll ID",
                        "name": "poll_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/genprotos.QuestionGetAllRes"
                        }
                    },
                    "400": {
                        "description": "Invalid request payload",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Server error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/recover-password": {
            "post": {
                "description": "Verifies the code and updates the password",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "password-recovery"
                ],
                "summary": "Recover password (Use this one after sending verification code)",
                "parameters": [
                    {
                        "description": "Recover Password Request",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.RecoverPasswordReq"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Password successfully updated",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Invalid request payload",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "401": {
                        "description": "Incorrect verification code",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "Verification code expired or email not found",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Error updating password",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/register": {
            "post": {
                "description": "Register a new user with email, username, and password",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "registration"
                ],
                "summary": "Register a new user",
                "parameters": [
                    {
                        "description": "User registration request",
                        "name": "user",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/genprotos.RegisterReqForSwagger"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "JWT tokens",
                        "schema": {
                            "$ref": "#/definitions/token.Tokens"
                        }
                    },
                    "400": {
                        "description": "Invalid request payload",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Server error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/results": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Get overall results writing in excel file",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "results"
                ],
                "summary": "Get results in excel file",
                "responses": {
                    "200": {
                        "description": "File URL",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "404": {
                        "description": "Poll not found",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Server error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/resverify": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Sends a confirmation code to email recovery password again",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "password-recovery"
                ],
                "summary": "Sends code again if user didn't recieve the code",
                "parameters": [
                    {
                        "description": "User login credentials",
                        "name": "credentials",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/genprotos.ByEmail"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "Page not found",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Server error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/send-answers": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "incoming results of user",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "answer"
                ],
                "summary": "Handles results",
                "parameters": [
                    {
                        "description": "Poll creation request",
                        "name": "poll",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/genprotos.IncomingResult"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Successfully posted",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Invalid request payload",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Server error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "genprotos.ByEmail": {
            "type": "object",
            "properties": {
                "email": {
                    "type": "string"
                }
            }
        },
        "genprotos.Feedback": {
            "type": "object",
            "properties": {
                "from": {
                    "type": "integer"
                },
                "text": {
                    "type": "string"
                },
                "to": {
                    "type": "integer"
                }
            }
        },
        "genprotos.IncomingAnswer": {
            "type": "object",
            "properties": {
                "answer_point": {
                    "type": "integer"
                },
                "num": {
                    "type": "integer"
                },
                "question_id": {
                    "type": "string"
                }
            }
        },
        "genprotos.IncomingResult": {
            "type": "object",
            "properties": {
                "answers": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/genprotos.IncomingAnswer"
                    }
                },
                "poll_id": {
                    "type": "string"
                },
                "user_id": {
                    "type": "string"
                }
            }
        },
        "genprotos.Option": {
            "type": "object",
            "properties": {
                "ball": {
                    "type": "integer"
                },
                "variant": {
                    "type": "string"
                }
            }
        },
        "genprotos.PollCreateReq": {
            "type": "object",
            "properties": {
                "feedbacks": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/genprotos.Feedback"
                    }
                },
                "options": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/genprotos.Option"
                    }
                },
                "title": {
                    "type": "string"
                }
            }
        },
        "genprotos.PollGetAllRes": {
            "type": "object",
            "properties": {
                "poll": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/genprotos.PollGetByIDRes"
                    }
                }
            }
        },
        "genprotos.PollGetByIDRes": {
            "type": "object",
            "properties": {
                "feedback": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/genprotos.Feedback"
                    }
                },
                "id": {
                    "type": "string"
                },
                "options": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/genprotos.Option"
                    }
                },
                "poll_num": {
                    "type": "integer"
                },
                "title": {
                    "type": "string"
                }
            }
        },
        "genprotos.PollUpdateReqSwag": {
            "type": "object",
            "properties": {
                "feedbacks": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/genprotos.Feedback"
                    }
                },
                "options": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/genprotos.Option"
                    }
                },
                "title": {
                    "type": "string"
                }
            }
        },
        "genprotos.Question": {
            "type": "object",
            "properties": {
                "content": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "num": {
                    "type": "integer"
                },
                "poll_id": {
                    "type": "string"
                }
            }
        },
        "genprotos.QuestionCreateReq": {
            "type": "object",
            "properties": {
                "content": {
                    "type": "string"
                },
                "poll_id": {
                    "type": "string"
                }
            }
        },
        "genprotos.QuestionGetAllRes": {
            "type": "object",
            "properties": {
                "poll": {
                    "$ref": "#/definitions/genprotos.PollGetByIDRes"
                },
                "question": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/genprotos.Question"
                    }
                }
            }
        },
        "genprotos.QuestionGetByIDRes": {
            "type": "object",
            "properties": {
                "content": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "poll_id": {
                    "type": "string"
                }
            }
        },
        "genprotos.QuestionUpdateReq": {
            "type": "object",
            "properties": {
                "content": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                }
            }
        },
        "genprotos.RegisterReqForSwagger": {
            "type": "object",
            "properties": {
                "email": {
                    "type": "string"
                },
                "gender": {
                    "type": "string"
                },
                "level_type": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "password": {
                    "type": "string"
                },
                "phone_number": {
                    "type": "string"
                },
                "surname": {
                    "type": "string"
                },
                "working_experience": {
                    "type": "integer"
                }
            }
        },
        "models.ConfirmRegistrationReq": {
            "type": "object",
            "properties": {
                "code": {
                    "type": "string"
                },
                "email": {
                    "type": "string"
                }
            }
        },
        "models.ForgotPasswordReq": {
            "type": "object",
            "properties": {
                "email": {
                    "description": "User's email address",
                    "type": "string"
                }
            }
        },
        "models.GetProfileResp": {
            "type": "object",
            "properties": {
                "email": {
                    "description": "User's email address",
                    "type": "string"
                },
                "id": {
                    "description": "User's unique identifier",
                    "type": "string"
                },
                "is_confirmed": {
                    "description": "Add IsConfirmed to the model",
                    "type": "boolean"
                },
                "password": {
                    "description": "User's password",
                    "type": "string"
                },
                "role": {
                    "type": "string"
                }
            }
        },
        "models.LoginReq": {
            "type": "object",
            "properties": {
                "email": {
                    "description": "User's email",
                    "type": "string"
                },
                "password": {
                    "description": "User's password",
                    "type": "string"
                }
            }
        },
        "models.RecoverPasswordReq": {
            "type": "object",
            "properties": {
                "code": {
                    "type": "string"
                },
                "email": {
                    "type": "string"
                },
                "new_password": {
                    "type": "string"
                }
            }
        },
        "token.Tokens": {
            "type": "object",
            "properties": {
                "access_token": {
                    "type": "string"
                },
                "refresh_token": {
                    "type": "string"
                },
                "role": {
                    "type": "string"
                }
            }
        }
    },
    "securityDefinitions": {
        "BearerAuth": {
            "type": "apiKey",
            "name": "Authorization",
            "in": "header"
        }
    }
}